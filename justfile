#NOTE: Autogenerated template by @beauwilliams
# Declaratively set shell recipes a.k.a commands should run in
set shell := ["bash", "-uc"]

# Load environment variables
set dotenv-load := true
# apikey:
#    echo " from .env"

# set positional-arguments := true
# foo:
#   echo justinit
#   echo

# Colours

RED:= "\\033[31m"
GREEN:= "\\033[32m"
YELLOW:= "\\033[33m"
BLUE:= "\\033[34m"
MAGNETA:= "\\033[35m"
CYAN:= "\\033[36m"
WHITE:= "\\033[37m"
BOLD:= "\\033[1m"
UNDERLINE:= "\\033[4m"
INVERTED_COLOURS:= "\\033[7m"
RESET := "\\033[0m"
NEWLINE := "\n"

# Recipes

#This recipe will be the default if you run just without an argument, e.g list out available commands
default:
    @just --list --unsorted --list-heading $'{{BOLD}}{{GREEN}}Available recipes:{{NEWLINE}}{{RESET}}'

start:
    pnpm start




hello:
    @#Hide the recipe being run in the output using an @ symbol
    @#Here we use our hidden helper to prettify the text
    @just _bold_squares "{{YELLOW}}Hello World!"

#By default it prints the recipe that was run in output before outputting result
display:
    echo -e "Hello World! {{UNDERLINE}}Here we see the recipe that was run printed also by omitting @ in front of recipe"

whoami $name:
    @#Recipe param as env variable with $ sign
    echo $name

# Tip use ni to automatically determine your package manager
install *PACKAGES:
    @#Recipe param as list of packages
    @ni {{PACKAGES}}
install-dev *PACKAGES:
    @#Recipe param as list of packages
    @ni -D {{PACKAGES}}


# Tip: Private/helper recipes start with _
_build:
    @echo "Building..."

# Tip: Use variables with ':=' for reuse
NODE_ENV := "development"
build:
    @echo "Building in {{NODE_ENV}}"

# Tip: Create recipe aliases with 'alias'
alias b := build
alias t := test

# Tip: Use dependencies by adding them after the recipe name with a colon
lint:
    @echo 'Linting...'
test: lint build
    @echo 'Testing...'


# Tip: Use backticks for command substitution
current_branch := `git branch --show-current`
branch:
    @echo "On branch {{current_branch}}"

# Tip: Use indentation for multi-line commands
setup:
    #!/usr/bin/env bash
    echo "Setting up..."
    npm install
    cp .env.example .env

# Tip: Use parameters with default values
serve port='3000':
    npm start -- --port={{port}}

# Tip: Use conditionals with if/else
deploy ENV:
    @if [ "{{ENV}}" = "prod" ]; then         echo "Deploying to production";     else         echo "Deploying to staging";     fi

# Tip: Export environment variables for child processes
export RUST_BACKTRACE := "1"

# Tip: Recipe documentation appears in --list
# Lists all files in a directory
# Usage: just ls path
ls path:
    @ls {{path}}

# Tip: Load .env variables with dotenv-load
# Then use them in recipes:
load-env:
    @echo "API key: "

# Hidden Recipes

_bold_squares message:
    @#Hidden recipes have _ in front, i.e these can be helpers such as pretty printer below
    @echo -e "{{BOLD}}[{{RESET}}{{message}}{{RESET}}{{BOLD}}]{{RESET}}"
